
-if comment.bitly_hash.blank? || comment.link_title.blank?
  - unless comment.shorten_attempts > 5
    - content_for :scripts do
      %script{:type=>"text/javascript"}
        = remote_function(:update => "comment_link_#{comment.id}", :url => shorten_comment_path(comment.commentable_type, comment.commentable_id, comment), :method => :put)
    

-if comment.user
  .comment.hentry{:id => "comment_#{comment.id}"}
    .vcard.author
      %h5= link_to image_tag(comment.user.avatar_photo_url(:thumb), :height => '50', :width => '50', :alt => "#{comment.user.login}"), user_path(comment.user), :rel => 'bookmark', :class => 'photo', :title => "#{comment.user.login}'s profile"
      %ul
        %li.fn.left
          = link_to comment.user.login, user_path(comment.user), :class => 'url'
        %li.update.right
          %a{"href"=> commentable_url(comment), "rel"=>"bookmark"}
            %abbr.published{"title"=>"#{comment.created_at}"}
              = comment.created_at.strftime("%B %d, %Y")
        -if ( comment.can_be_deleted_by(current_user) )
          %li.delete.right.quiet=link_to_remote("Delete".l, {:url => comment_path(comment.commentable_type, comment.commentable_id, comment), :method => :delete, 500 => 'alert(\'Sorry, there was a server error\'); return false',  :success => visual_effect(:fade, "comment_#{comment.id}"), :confirm => :are_you_sure_you_want_to_permanently_delete_this_comment.l} )
        -if ( current_user)
          %li.moderate.right.quiet=link_to_remote("Flag".l, {:url => moderate_comment_path(comment.commentable_type, comment.commentable_id, comment), :method => :put, 500 => 'alert(\'Sorry, there was a server error\'); return false',  :success => visual_effect(:fade, "comment_#{comment.id}"), :confirm => "Are you sure you want to flag this comment for the moderator? This will temporarily remove it from the site"} )
          
    .entry-link{:id => "comment_link_#{comment.id}"}
      -if comment.answer.blank?
        -unless comment.short_link.blank?
          %a{"href"=> comment.short_link, "rel"=>"bookmark"}
            
            = comment.link_title unless comment.link_title.blank?
            = truncate(comment.link) if comment.link_title.blank?
        - else
          %a{"href"=> comment.link, "rel"=>"bookmark"}
            = comment.link_title unless comment.link_title.blank?
            = truncate(comment.link) if comment.link_title.blank?
          
      -else
        -unless comment.short_link.blank?
          %a{"href"=> comment.short_link, "rel"=>"bookmark"}
            %h3=comment.answer
        - else
          %a{"href"=> comment.link, "rel"=>"bookmark"}
            =comment.answer
    -unless comment.bitly_hash.blank? 
      /.entry-thumb
      /  = image_tag comment.short_link_thumb
    
    .entry-content      

      = clean comment.comment

-else
  .hentry{:id => "comment_#{comment.id}"}
    .vcard.author
      %h5
        %a{:href => '#', :rel => 'bookmark', :class => 'photo', :onclick => 'return false;'}
          = image_tag(AppConfig.photo['missing_thumb'], :height => '50', :width => '50')
      %ul
        %li.fn
          =link_to_unless(comment.author_url.blank?, h(comment.username), h(comment.author_url)){ h(comment.username) }
        %li.update
          %a{"href"=> commentable_url(comment), "rel"=>"bookmark"}
            %abbr.published{"title"=>"#{comment.created_at}"}
              = comment.created_at.strftime("%B %d, %Y")
        -if ( comment.can_be_deleted_by(current_user) )
          %li.delete=link_to_remote("Delete".l, {:url => comment_path(comment.commentable_type, comment.commentable_id, comment), :method => :delete, 500 => 'alert(\'Sorry, there was a server error\'); return false',  :success => visual_effect(:fade, "comment_#{comment.id}"), :confirm => "Are you sure you want to permanently delete this comment"} )
    .entry-content= comment.comment
    
    .button
    /= button_to "Request moderation".l, moderate_investigation_path(@investigation), {:method=> :post, :confirm => "Are you sure you want to request moderation? The investigation will no longer be public and "}

- highlighted ||= nil
- if highlighted
  - content_for :scripts do    
  
    %script{"type"=>"text/javascript"}
      =visual_effect :highlight, "comment_#{comment.id}", :duration => 1 

